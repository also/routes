package com.ryanberdeen.routes;

import java.util.Collections;
import java.util.Map;

public interface Mapping {
	public Map<String, String> EMPTY_PARAMETERS = Collections.emptyMap();

	/**
	 * Returns the route with the specified name.
	 *
	 * @param name the name of the route
	 * @return the named route, or <code>null</code> if no route is so named
	 */
	public abstract Route getNamedRoute(String name);

	public Map<String, Route> getNamedRoutes();

	/**
	 * Returns the route and parameter values that best match the method and
	 * path.
	 *
	 * @param method the HTTP method
	 * @param path the path of the request
	 * @return the request match for the route, or <code>null</code> if no route matches
	 */
	public RequestMatch getBestMatch(String method, String path);

	public Route getBestMatch(Map<String, Object> parameters);

	/**
	 * Returns the route that best matches the parameters. The URI generated by
	 * the route, using the same parameters, should produce the same route and
	 * parameters when passed to {@link #getBestMatch(String, String)}.
	 *
	 * @param parameters parameters the parameters to match
	 * @param contextParameters
	 * @return the route that best matches the parameters, or <code>null</code>
	 *         if no route matches
	 */
	public Route getBestMatch(Map<String, Object> parameters, Map<String, String> contextParameters);

	public String getPath(String name, Map<String, Object> parameters, Map<String, String> contextParameters);

	public String getPath(Map<String, Object> parameters, Map<String, String> contextParameters);
}
